<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\IIC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\IIC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Sep 20 11:04:06 2022
<BR><P>
<H3>Maximum Stack Usage =        432 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
aw862xx_get_reg &rArr; aw862xx_read_reg_array &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[96]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[42]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[42]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5f]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[68]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[69]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6a]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6b]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[58]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[60]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[50]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4f]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[52]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[51]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[59]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[61]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[53]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[54]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[63]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2f]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[32]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4b]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4a]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4c]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4d]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4e]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[62]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[66]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[67]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5b]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5e]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5d]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5c]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[64]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[65]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[70]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[55]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[56]">USART2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[57]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5a]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7a]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[6f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[12]">aw862xx_calculate_cali_data</a> from aw862xx.o(i.aw862xx_calculate_cali_data) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[3]">aw862xx_check_qualify</a> from aw862xx.o(i.aw862xx_check_qualify) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[a]">aw862xx_cont_config</a> from aw862xx.o(i.aw862xx_cont_config) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[5]">aw862xx_cont_get_f0</a> from aw862xx.o(i.aw862xx_cont_get_f0) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[18]">aw862xx_get_fifo_addr</a> from aw862xx.o(i.aw862xx_get_fifo_addr) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[23]">aw862xx_get_glb_state</a> from aw862xx.o(i.aw862xx_get_glb_state) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[4]">aw862xx_get_irq_state</a> from aw862xx.o(i.aw862xx_get_irq_state) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[22]">aw862xx_get_lra_resistance</a> from aw862xx.o(i.aw862xx_get_lra_resistance) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[1a]">aw862xx_get_ram_data</a> from aw862xx.o(i.aw862xx_get_ram_data) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[21]">aw862xx_get_reg</a> from aw862xx.o(i.aw862xx_get_reg) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[20]">aw862xx_get_vbat</a> from aw862xx.o(i.aw862xx_get_vbat) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[8]">aw862xx_haptic_start</a> from aw862xx.o(i.aw862xx_haptic_start) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[f]">aw862xx_interrupt_setup</a> from aw862xx.o(i.aw862xx_interrupt_setup) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[7]">aw862xx_irq_clear</a> from aw862xx.o(i.aw862xx_irq_clear) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[24]">aw862xx_judge_rtp_going</a> from aw862xx.o(i.aw862xx_judge_rtp_going) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[e]">aw862xx_misc_para_init</a> from aw862xx.o(i.aw862xx_misc_para_init) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[b]">aw862xx_offset_cali</a> from aw862xx.o(i.aw862xx_offset_cali) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[c]">aw862xx_play_mode</a> from aw862xx.o(i.aw862xx_play_mode) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[9]">aw862xx_play_stop</a> from aw862xx.o(i.aw862xx_play_stop) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[11]">aw862xx_protect_config</a> from aw862xx.o(i.aw862xx_protect_config) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[d]">aw862xx_raminit</a> from aw862xx.o(i.aw862xx_raminit) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[25]">aw862xx_rtp_get_fifo_afs</a> from aw862xx.o(i.aw862xx_rtp_get_fifo_afs) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[1d]">aw862xx_set_base_addr</a> from aw862xx.o(i.aw862xx_set_base_addr) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[17]">aw862xx_set_fifo_addr</a> from aw862xx.o(i.aw862xx_set_fifo_addr) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[13]">aw862xx_set_gain</a> from aw862xx.o(i.aw862xx_set_gain) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[1b]">aw862xx_set_ram_addr</a> from aw862xx.o(i.aw862xx_set_ram_addr) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[19]">aw862xx_set_ram_data</a> from aw862xx.o(i.aw862xx_set_ram_data) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[1c]">aw862xx_set_repeat_seq</a> from aw862xx.o(i.aw862xx_set_repeat_seq) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[1f]">aw862xx_set_rtp_aei</a> from aw862xx.o(i.aw862xx_set_rtp_aei) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[16]">aw862xx_set_rtp_data</a> from aw862xx.o(i.aw862xx_set_rtp_data) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[1e]">aw862xx_set_trim_lra</a> from aw862xx.o(i.aw862xx_set_trim_lra) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[15]">aw862xx_set_wav_loop</a> from aw862xx.o(i.aw862xx_set_wav_loop) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[14]">aw862xx_set_wav_seq</a> from aw862xx.o(i.aw862xx_set_wav_seq) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[6]">aw862xx_trig_init</a> from aw862xx.o(i.aw862xx_trig_init) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[10]">aw862xx_vbat_mode_config</a> from aw862xx.o(i.aw862xx_vbat_mode_config) referenced 2 times from aw862xx.o(.data)
 <LI><a href="#[73]">cali_show</a> from haptic_nv.o(i.cali_show) referenced from haptic_nv.o(i.create_node)
 <LI><a href="#[71]">f0_cali</a> from haptic_nv.o(i.f0_cali) referenced from haptic_nv.o(i.create_node)
 <LI><a href="#[72]">f0_show</a> from haptic_nv.o(i.f0_show) referenced from haptic_nv.o(i.create_node)
 <LI><a href="#[6e]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[78]">get_ram_num</a> from haptic_nv.o(i.get_ram_num) referenced from haptic_nv.o(i.create_node)
 <LI><a href="#[75]">long_vib_work</a> from haptic_nv.o(i.long_vib_work) referenced from haptic_nv.o(i.create_node)
 <LI><a href="#[79]">ram_show</a> from haptic_nv.o(i.ram_show) referenced from haptic_nv.o(i.create_node)
 <LI><a href="#[74]">rtp_going</a> from haptic_nv.o(i.rtp_going) referenced from haptic_nv.o(i.create_node)
 <LI><a href="#[77]">rtp_vib_work</a> from haptic_nv.o(i.rtp_vib_work) referenced from haptic_nv.o(i.create_node)
 <LI><a href="#[76]">short_vib_work</a> from haptic_nv.o(i.short_vib_work) referenced from haptic_nv.o(i.create_node)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[fc]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fd]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fe]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[ff]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[100]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[90]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7e]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[101]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[83]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[102]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[103]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[104]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[105]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[106]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[107]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[108]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[109]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[110]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[111]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[112]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[113]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[114]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[115]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[116]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[88]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[117]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[118]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[119]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[11a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[11b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[11c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[11d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[11e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[80]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[82]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[11f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[84]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; haptic_nv_boot_init &rArr; parse_chipid &rArr; haptic_nv_read_chipid &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[120]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[97]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[87]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[121]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[89]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[26]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[122]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_show
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_read_reg_array
</UL>

<P><STRONG><a name="[91]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[92]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[7f]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[123]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_show
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ram_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_read_reg_array
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[8c]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[93]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[94]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[81]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[86]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>AT24CXX_Check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hdl_aw86224.o(i.AT24CXX_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AT24CXX_Check &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hdl_aw86224.o(i.AT24CXX_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>

<P><STRONG><a name="[9a]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hdl_aw86224.o(i.AT24CXX_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>

<P><STRONG><a name="[a1]"></a>AW86224FCR_ReadLenByte</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hdl_aw86224.o(i.AW86224FCR_ReadLenByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>

<P><STRONG><a name="[a2]"></a>AW86224_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hdl_aw86224.o(i.AW86224_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AW86224_Init &rArr; IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>AW86224_WriteLenByte</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, hdl_aw86224.o(i.AW86224_WriteLenByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AW86224_WriteLenByte &rArr; IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
</UL>

<P><STRONG><a name="[2a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
</UL>

<P><STRONG><a name="[c1]"></a>HAL_GPIO_Init</STRONG> (Thumb, 792 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[c8]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_pin_control
</UL>

<P><STRONG><a name="[a7]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ca]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a8]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ab]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[ad]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a9]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[b2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b4]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1114 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bb]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[cd]"></a>HAL_UART_GetState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_UART_MspInit</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[cb]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[28]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>IIC_Ack</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, myiic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_Ack &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[a3]"></a>IIC_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, myiic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224_Init
</UL>

<P><STRONG><a name="[c6]"></a>IIC_NAck</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, myiic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[9e]"></a>IIC_Read_Byte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, myiic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224FCR_ReadLenByte
</UL>

<P><STRONG><a name="[9c]"></a>IIC_Send_Byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, myiic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224_WriteLenByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224FCR_ReadLenByte
</UL>

<P><STRONG><a name="[9b]"></a>IIC_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, myiic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_Start &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224_WriteLenByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224FCR_ReadLenByte
</UL>

<P><STRONG><a name="[9f]"></a>IIC_Stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, myiic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224_WriteLenByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224FCR_ReadLenByte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[9d]"></a>IIC_Wait_Ack</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, myiic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224_WriteLenByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224FCR_ReadLenByte
</UL>

<P><STRONG><a name="[29]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>SDA_IN</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, myiic.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDA_IN &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[c4]"></a>SDA_OUT</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, myiic.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[2c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>Stm32_Clock_Init</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Stm32_Clock_Init &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>USART1_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8a]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e5]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[c5]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[6e]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>haptic_nv_boot_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, haptic_nv.o(i.haptic_nv_boot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = haptic_nv_boot_init &rArr; parse_chipid &rArr; haptic_nv_read_chipid &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_reset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_chipid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_reset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ptr_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_node
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_private_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>haptic_nv_i2c_reads</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, haptic_nv_config.o(i.haptic_nv_i2c_reads))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224FCR_ReadLenByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_read_chipid
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_chipid
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_rtp_get_fifo_afs
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_read_reg_array
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_read_lra_f0
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_stop
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_offset_cali
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_judge_rtp_going
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_irq_clear
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_interrupt_setup
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_vbat
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_ram_data
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_lra_resistance
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_irq_state
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_glb_state
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_fifo_addr
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_get_f0
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_check_qualify
</UL>

<P><STRONG><a name="[d2]"></a>haptic_nv_i2c_write_bits</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, haptic_nv_config.o(i.haptic_nv_i2c_write_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_vbat_mode_config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_sram_size
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_wav_loop
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_trim_lra
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_rtp_aei
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_pwm
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_base_addr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_raminit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_protect_config
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_stop
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_mode
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_offset_cali
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_misc_para_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_interrupt_setup
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_haptic_trig_param_config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_haptic_select_pin
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_vbat
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_lra_resistance
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_get_f0
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_auto_brk_config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8622x_config
</UL>

<P><STRONG><a name="[d3]"></a>haptic_nv_i2c_writes</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, haptic_nv_config.o(i.haptic_nv_i2c_writes))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = haptic_nv_i2c_writes &rArr; AW86224_WriteLenByte &rArr; IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224_WriteLenByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_reset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_vbat_mode_config
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_wav_seq
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_rtp_data
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_ram_data
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_ram_addr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_gain
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_fifo_addr
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_base_addr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_protect_config
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_stop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_go
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_misc_para_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_haptic_trig_param_config
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_get_f0
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8622x_config
</UL>

<P><STRONG><a name="[d6]"></a>haptic_nv_mdelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haptic_nv_config.o(i.haptic_nv_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = haptic_nv_mdelay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_enter_rtp_mode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_reset
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_vib_work
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_chipid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_reset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_stop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_go
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_vbat
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_lra_resistance
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_get_f0
</UL>

<P><STRONG><a name="[f1]"></a>haptic_nv_pin_control</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, haptic_nv_config.o(i.haptic_nv_pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = haptic_nv_pin_control
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_reset
</UL>

<P><STRONG><a name="[f2]"></a>haptic_nv_read_chipid</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, haptic_nv_config.o(i.haptic_nv_read_chipid))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = haptic_nv_read_chipid &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_chipid
</UL>

<P><STRONG><a name="[f5]"></a>haptic_nv_start_hrtimer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, haptic_nv_config.o(i.haptic_nv_start_hrtimer))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_vib_work
</UL>

<P><STRONG><a name="[f3]"></a>haptic_nv_stop_hrtimer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, haptic_nv_config.o(i.haptic_nv_stop_hrtimer))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_vib_work
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_vib_work
</UL>

<P><STRONG><a name="[85]"></a>main</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = main &rArr; haptic_nv_boot_init &rArr; parse_chipid &rArr; haptic_nv_read_chipid &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f6]"></a>uart_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ae]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[af]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b6]"></a>RCC_Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(i.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[70]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[b9]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>UART_Receive_IT</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>UART_SetConfig</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bc]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>aw8622x_config</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, aw862xx.o(i.aw8622x_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = aw8622x_config &rArr; aw862xx_sram_size &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_sram_size
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_auto_brk_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_misc_para_init
</UL>

<P><STRONG><a name="[d1]"></a>aw862xx_auto_brk_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_auto_brk_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aw862xx_auto_brk_config &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8622x_config
</UL>

<P><STRONG><a name="[12]"></a>aw862xx_calculate_cali_data</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, aw862xx.o(i.aw862xx_calculate_cali_data))
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>aw862xx_check_qualify</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_check_qualify))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = aw862xx_check_qualify &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>aw862xx_cont_config</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_cont_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = aw862xx_cont_config &rArr; aw862xx_play_mode &rArr; aw862xx_play_stop &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_mode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_go
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>aw862xx_cont_get_f0</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, aw862xx.o(i.aw862xx_cont_get_f0))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = aw862xx_cont_get_f0 &rArr; aw862xx_play_mode &rArr; aw862xx_play_stop &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_read_lra_f0
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_stop
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_mode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_go
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>aw862xx_get_fifo_addr</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aw862xx.o(i.aw862xx_get_fifo_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = aw862xx_get_fifo_addr &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>aw862xx_get_glb_state</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_get_glb_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = aw862xx_get_glb_state &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_go
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>aw862xx_get_irq_state</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_get_irq_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = aw862xx_get_irq_state &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>aw862xx_get_lra_resistance</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, aw862xx.o(i.aw862xx_get_lra_resistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = aw862xx_get_lra_resistance &rArr; aw862xx_play_stop &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_select_d2s_gain
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_raminit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>aw862xx_get_ram_data</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_get_ram_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = aw862xx_get_ram_data &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>aw862xx_get_reg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_get_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = aw862xx_get_reg &rArr; aw862xx_read_reg_array &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_read_reg_array
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>aw862xx_get_vbat</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_get_vbat))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = aw862xx_get_vbat &rArr; aw862xx_play_stop &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_raminit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[da]"></a>aw862xx_haptic_select_pin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_haptic_select_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aw862xx_haptic_select_pin &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_haptic_trig_param_config
</UL>

<P><STRONG><a name="[8]"></a>aw862xx_haptic_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_haptic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aw862xx_haptic_start &rArr; aw862xx_play_go &rArr; aw862xx_get_glb_state &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_go
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[db]"></a>aw862xx_haptic_trig_param_config</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, aw862xx.o(i.aw862xx_haptic_trig_param_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = aw862xx_haptic_trig_param_config &rArr; aw862xx_haptic_select_pin &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_haptic_trig_param_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_haptic_select_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_trig
</UL>

<P><STRONG><a name="[dc]"></a>aw862xx_haptic_trig_param_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, aw862xx.o(i.aw862xx_haptic_trig_param_init))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_trig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_haptic_trig_param_config
</UL>

<P><STRONG><a name="[f]"></a>aw862xx_interrupt_setup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_interrupt_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aw862xx_interrupt_setup &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>aw862xx_irq_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_irq_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = aw862xx_irq_clear &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>aw862xx_judge_rtp_going</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_judge_rtp_going))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = aw862xx_judge_rtp_going &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>aw862xx_misc_para_init</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_misc_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = aw862xx_misc_para_init &rArr; aw862xx_protect_config &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_pwm
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_protect_config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8622x_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>aw862xx_offset_cali</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_offset_cali))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = aw862xx_offset_cali &rArr; aw862xx_raminit &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_raminit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[d5]"></a>aw862xx_play_go</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_play_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = aw862xx_play_go &rArr; aw862xx_get_glb_state &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_glb_state
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_haptic_start
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_get_f0
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_config
</UL>

<P><STRONG><a name="[c]"></a>aw862xx_play_mode</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_play_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = aw862xx_play_mode &rArr; aw862xx_play_stop &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_pwm
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_get_f0
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>aw862xx_play_stop</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_play_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = aw862xx_play_stop &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_mode
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_vbat
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_lra_resistance
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_get_f0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>aw862xx_protect_config</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, aw862xx.o(i.aw862xx_protect_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = aw862xx_protect_config &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_misc_para_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>aw862xx_raminit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_raminit))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aw862xx_raminit &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_offset_cali
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_vbat
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_lra_resistance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[d7]"></a>aw862xx_read_lra_f0</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_read_lra_f0))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = aw862xx_read_lra_f0 &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_cont_get_f0
</UL>

<P><STRONG><a name="[d9]"></a>aw862xx_read_reg_array</STRONG> (Thumb, 80 bytes, Stack size 280 bytes, aw862xx.o(i.aw862xx_read_reg_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = aw862xx_read_reg_array &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_reg
</UL>

<P><STRONG><a name="[25]"></a>aw862xx_rtp_get_fifo_afs</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_rtp_get_fifo_afs))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = aw862xx_rtp_get_fifo_afs &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[d8]"></a>aw862xx_select_d2s_gain</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, aw862xx.o(i.aw862xx_select_d2s_gain))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_get_lra_resistance
</UL>

<P><STRONG><a name="[1d]"></a>aw862xx_set_base_addr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_set_base_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = aw862xx_set_base_addr &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>aw862xx_set_fifo_addr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, aw862xx.o(i.aw862xx_set_fifo_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = aw862xx_set_fifo_addr &rArr; haptic_nv_i2c_writes &rArr; AW86224_WriteLenByte &rArr; IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>aw862xx_set_gain</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_set_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = aw862xx_set_gain &rArr; haptic_nv_i2c_writes &rArr; AW86224_WriteLenByte &rArr; IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>aw862xx_set_pwm</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_set_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aw862xx_set_pwm &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_play_mode
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_misc_para_init
</UL>

<P><STRONG><a name="[1b]"></a>aw862xx_set_ram_addr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_set_ram_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = aw862xx_set_ram_addr &rArr; haptic_nv_i2c_writes &rArr; AW86224_WriteLenByte &rArr; IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>aw862xx_set_ram_data</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_set_ram_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = aw862xx_set_ram_data &rArr; haptic_nv_i2c_writes &rArr; AW86224_WriteLenByte &rArr; IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>aw862xx_set_repeat_seq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_set_repeat_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = aw862xx_set_repeat_seq &rArr; aw862xx_set_wav_loop &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_wav_seq
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_wav_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>aw862xx_set_rtp_aei</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_set_rtp_aei))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aw862xx_set_rtp_aei &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>aw862xx_set_rtp_data</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_set_rtp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = aw862xx_set_rtp_data &rArr; haptic_nv_i2c_writes &rArr; AW86224_WriteLenByte &rArr; IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>aw862xx_set_trig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_set_trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = aw862xx_set_trig &rArr; aw862xx_haptic_trig_param_config &rArr; aw862xx_haptic_select_pin &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_haptic_trig_param_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_haptic_trig_param_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_trig_init
</UL>

<P><STRONG><a name="[1e]"></a>aw862xx_set_trim_lra</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_set_trim_lra))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aw862xx_set_trim_lra &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>aw862xx_set_wav_loop</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, aw862xx.o(i.aw862xx_set_wav_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = aw862xx_set_wav_loop &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_repeat_seq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>aw862xx_set_wav_seq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_set_wav_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = aw862xx_set_wav_seq &rArr; haptic_nv_i2c_writes &rArr; AW86224_WriteLenByte &rArr; IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_repeat_seq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>aw862xx_sram_size</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_sram_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aw862xx_sram_size &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8622x_config
</UL>

<P><STRONG><a name="[6]"></a>aw862xx_trig_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, aw862xx.o(i.aw862xx_trig_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = aw862xx_trig_init &rArr; aw862xx_set_trig &rArr; aw862xx_haptic_trig_param_config &rArr; aw862xx_haptic_select_pin &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw862xx_set_trig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>aw862xx_vbat_mode_config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aw862xx.o(i.aw862xx_vbat_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = aw862xx_vbat_mode_config &rArr; haptic_nv_i2c_write_bits &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_write_bits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw862xx.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>cali_show</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, haptic_nv.o(i.cali_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cali_show &rArr; upload_lra
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_lra
</UL>
<BR>[Address Reference Count : 1]<UL><LI> haptic_nv.o(i.create_node)
</UL>
<P><STRONG><a name="[e1]"></a>check_ram_data</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, haptic_nv.o(i.check_ram_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = check_ram_data &rArr; parse_ram_data
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_ram_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;container_update
</UL>

<P><STRONG><a name="[ed]"></a>chip_private_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, haptic_nv.o(i.chip_private_init))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
</UL>

<P><STRONG><a name="[e3]"></a>container_update</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, haptic_nv.o(i.container_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = container_update &rArr; check_ram_data &rArr; parse_ram_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ram_data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ram_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_load
</UL>

<P><STRONG><a name="[f0]"></a>create_node</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, haptic_nv.o(i.create_node))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
</UL>

<P><STRONG><a name="[71]"></a>f0_cali</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, haptic_nv.o(i.f0_cali))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = f0_cali &rArr; upload_lra
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_lra
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_within_cali_range
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> haptic_nv.o(i.create_node)
</UL>
<P><STRONG><a name="[72]"></a>f0_show</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, haptic_nv.o(i.f0_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = f0_show &rArr; upload_lra
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_lra
</UL>
<BR>[Address Reference Count : 1]<UL><LI> haptic_nv.o(i.create_node)
</UL>
<P><STRONG><a name="[ee]"></a>func_ptr_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, haptic_nv.o(i.func_ptr_init))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
</UL>

<P><STRONG><a name="[f7]"></a>get_base_addr</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, haptic_nv.o(i.get_base_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_base_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_init
</UL>

<P><STRONG><a name="[78]"></a>get_ram_num</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, haptic_nv.o(i.get_ram_num))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> haptic_nv.o(i.create_node)
</UL>
<P><STRONG><a name="[e8]"></a>haptic_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, haptic_nv.o(i.haptic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = haptic_init &rArr; f0_cali &rArr; upload_lra
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f0_cali
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
</UL>

<P><STRONG><a name="[ea]"></a>hw_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, haptic_nv.o(i.hw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hw_reset &rArr; haptic_nv_mdelay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_pin_control
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
</UL>

<P><STRONG><a name="[fa]"></a>judge_rtp_load_end</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, haptic_nv.o(i.judge_rtp_load_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = judge_rtp_load_end
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_going
</UL>

<P><STRONG><a name="[e7]"></a>judge_within_cali_range</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, haptic_nv.o(i.judge_within_cali_range))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f0_cali
</UL>

<P><STRONG><a name="[75]"></a>long_vib_work</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, haptic_nv.o(i.long_vib_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = long_vib_work &rArr; upload_lra
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_stop_hrtimer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_start_hrtimer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_lra
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_vbat_comp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> haptic_nv.o(i.create_node)
</UL>
<P><STRONG><a name="[eb]"></a>parse_chipid</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, haptic_nv.o(i.parse_chipid))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = parse_chipid &rArr; haptic_nv_read_chipid &rArr; haptic_nv_i2c_reads &rArr; AW86224FCR_ReadLenByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_read_chipid
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_reads
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
</UL>

<P><STRONG><a name="[e2]"></a>parse_ram_data</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, haptic_nv.o(i.parse_ram_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = parse_ram_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ram_data
</UL>

<P><STRONG><a name="[ef]"></a>ram_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, haptic_nv.o(i.ram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ram_init &rArr; ram_load &rArr; container_update &rArr; check_ram_data &rArr; parse_ram_data
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_load
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_base_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
</UL>

<P><STRONG><a name="[f8]"></a>ram_load</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, haptic_nv.o(i.ram_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ram_load &rArr; container_update &rArr; check_ram_data &rArr; parse_ram_data
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ram_num
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;container_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_init
</UL>

<P><STRONG><a name="[79]"></a>ram_show</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, haptic_nv.o(i.ram_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ram_show &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> haptic_nv.o(i.create_node)
</UL>
<P><STRONG><a name="[f4]"></a>ram_vbat_comp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, haptic_nv.o(i.ram_vbat_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ram_vbat_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_vib_work
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_vib_work
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_vib_work
</UL>

<P><STRONG><a name="[74]"></a>rtp_going</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, haptic_nv.o(i.rtp_going))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtp_going &rArr; write_rtp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rtp_data
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_rtp_load_end
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_vib_work
</UL>
<BR>[Address Reference Count : 1]<UL><LI> haptic_nv.o(i.create_node)
</UL>
<P><STRONG><a name="[77]"></a>rtp_vib_work</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, haptic_nv.o(i.rtp_vib_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtp_vib_work &rArr; wait_enter_rtp_mode &rArr; haptic_nv_mdelay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_enter_rtp_mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_lra
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_going
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_vbat_comp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> haptic_nv.o(i.create_node)
</UL>
<P><STRONG><a name="[76]"></a>short_vib_work</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, haptic_nv.o(i.short_vib_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = short_vib_work &rArr; upload_lra
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_stop_hrtimer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_lra
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_vbat_comp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> haptic_nv.o(i.create_node)
</UL>
<P><STRONG><a name="[ec]"></a>sw_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, haptic_nv.o(i.sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sw_reset &rArr; haptic_nv_i2c_writes &rArr; AW86224_WriteLenByte &rArr; IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_i2c_writes
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_boot_init
</UL>

<P><STRONG><a name="[e0]"></a>upload_lra</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, haptic_nv.o(i.upload_lra))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upload_lra
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_vib_work
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_vib_work
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_vib_work
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f0_show
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f0_cali
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cali_show
</UL>

<P><STRONG><a name="[fb]"></a>wait_enter_rtp_mode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, haptic_nv.o(i.wait_enter_rtp_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wait_enter_rtp_mode &rArr; haptic_nv_mdelay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haptic_nv_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_vib_work
</UL>

<P><STRONG><a name="[e4]"></a>write_ram_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, haptic_nv.o(i.write_ram_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_ram_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;container_update
</UL>

<P><STRONG><a name="[f9]"></a>write_rtp_data</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, haptic_nv.o(i.write_rtp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_rtp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_going
</UL>

<P><STRONG><a name="[a4]"></a>Pin_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hdl_aw86224.o(i.Pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Pin_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW86224_Init
</UL>

<P><STRONG><a name="[6f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
